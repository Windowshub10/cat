// 8-puzzle
from collections import deque
goal_state = [[1, 2, 3],
              [4, 5, 6],
              [7, 8, "e"]]
start_state = [[4, 1, 2],
               [7, 3, "e"],
               [8, 5, 6]]
def to_tuple(state):
    return tuple(tuple(row) for row in state)
def to_list(state):
    return [list(row) for row in state]
def find_empty(state):
    for i in range(3):
        for j in range(3):
            if state[i][j] == "e":
                return i, j
def move(state, direction):
    state = to_list(state)
    i, j = find_empty(state)
    if direction == "up" and i > 0:
        state[i][j], state[i-1][j] = state[i-1][j], state[i][j]
    elif direction == "down" and i < 2:
        state[i][j], state[i+1][j] = state[i+1][j], state[i][j]
    elif direction == "left" and j > 0:
        state[i][j], state[i][j-1] = state[i][j-1], state[i][j]
    elif direction == "right" and j < 2:
        state[i][j], state[i][j+1] = state[i][j+1], state[i][j]
    else:
        return None  # invalid move
    return to_tuple(state)
def print_puzzle(state):
    for row in state:
        print(row)
    print()
def solve_puzzle(start, goal):
    queue = deque([(to_tuple(start), [])])
    visited = {to_tuple(start)}
    while queue:
        state, path = queue.popleft()
        if state == to_tuple(goal):
            return path + [state]
        for direction in ["up", "down", "left", "right"]:
            new_state = move(state, direction)
            if new_state and new_state not in visited:
                visited.add(new_state)
                queue.append((new_state, path + [state]))
    return None
solution = solve_puzzle(start_state, goal_state)
if solution:
    print("Solution found in", len(solution)-1, "moves:\n")
    for step, state in enumerate(solution):
        print("Step", step)
        print_puzzle(state)
else:
    print("No solution found.")
