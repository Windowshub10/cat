from collections import deque
def solve_missionaries_cannibals():
    start_state = (3, 3, 1)
    goal_state = (0, 0, 0)
    boat_moves = [
        (1, 0),  
        (2, 0),  
        (0, 1),  
        (0, 2),  
        (1, 1)   
    ]
    queue = deque([(start_state, [start_state])])
    visited = {start_state}  
    while queue:
        current_state, path = queue.popleft()
        if current_state == goal_state:
            return path
        missionaries_left, cannibals_left, boat_side = current_state
        for move_m, move_c in boat_moves:
            if boat_side == 1:  
                new_m_left = missionaries_left - move_m
                new_c_left = cannibals_left - move_c
                new_boat_side = 0
            else:  
                new_m_left = missionaries_left + move_m
                new_c_left = cannibals_left + move_c
                new_boat_side = 1
            new_m_right = 3 - new_m_left
            new_c_right = 3 - new_c_left
            if (new_m_left < 0 or new_c_left < 0 or
                new_m_right < 0 or new_c_right < 0 or
                new_m_left > 3 or new_c_left > 3 or
                new_m_right > 3 or new_c_right > 3):
                continue
            if (new_m_left > 0 and new_c_left > new_m_left) or \
               (new_m_right > 0 and new_c_right > new_m_right):
                continue
            new_state = (new_m_left, new_c_left, new_boat_side)
            if new_state not in visited:
                visited.add(new_state)
                queue.append((new_state, path + [new_state]))
    return None 
solution = solve_missionaries_cannibals()
if solution:
    print("Steps:\n")
    for state in solution:
        m_left, c_left, boat_side = state
        m_right = 3 - m_left
        c_right = 3 - c_left
        if boat_side == 1:
            boat_position = "LEFT"
        else:
            boat_position = "RIGHT"

        print("Left:",m_left,"M",c_left,"C  |  Right:",m_right,"M",c_right,"C  |  Boat:", boat_position)
else:
    print("No solution found.")
